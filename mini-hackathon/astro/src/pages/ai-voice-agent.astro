---
let title = "AI Voice Agent";
---

<html>
  <head>
    <title>{title}</title>
    <script client:load>

        import {
            LocalParticipant,
            LocalTrackPublication,
            Participant,
            RemoteParticipant,
            RemoteTrack,
            RemoteTrackPublication,
            Room,
            RoomEvent,
            Track,
            VideoPresets,
        } from 'livekit-client';
        import { AccessToken, VideoGrant } from 'livekit-server-sdk';
    
        ///////////////GET ACCESS TOKEN   
        const roomName = 'name-of-room';
        const participantName = 'user-name';
    
        const at = new AccessToken('APIp6tfeZTEd4Cc', 'ed0jOPS3Xeq12QsBrntETtjiTA3z9qvD3dgLOxqnfzYB', {
            identity: participantName,
        }); 
    
        const videoGrant: VideoGrant = { 
        room: roomName,
        roomJoin: true,
        canPublish: true,
        canSubscribe: true,
        };  
    
        at.addGrant(videoGrant);
        const token = await at.toJwt();
    
        console.log('access token', token); //OK!!
    
    
        ///////////////CREATE ROOM
        // creates a new room with options
        const room = new Room({
            // automatically manage subscribed video quality
            adaptiveStream: true,
            // optimize publishing bandwidth and CPU for published tracks
            dynacast: true,
            // default capture settings
            videoCaptureDefaults: {
                resolution: VideoPresets.h720.resolution,
            },
        });
    
        // pre-warm connection, this can be called as early as your page is loaded. URL is Livekit's signaling server URL
        room.prepareConnection("wss://devmorningbkk-tizz202p.livekit.cloud/", token); //OK!!
    
        // set up event listeners
        room
        .on(RoomEvent.TrackSubscribed, handleTrackSubscribed)
        .on(RoomEvent.TrackUnsubscribed, handleTrackUnsubscribed)
        .on(RoomEvent.ActiveSpeakersChanged, handleActiveSpeakerChange)
        .on(RoomEvent.Disconnected, handleDisconnect)
        .on(RoomEvent.LocalTrackUnpublished, handleLocalTrackUnpublished);
    
        // connect to room with URL of the LiveKit server itself
        await room.connect('wss://devmorningbkk-tizz202p.livekit.cloud', token); //OK!!
        //console.log('connected to room', room.name);
    
        // publish local camera and mic tracks
        await room.localParticipant.enableCameraAndMicrophone();
    
        //////////////START PartiCIPATION
        // turn on the local user's camera and mic, this may trigger a browser prompt to ensure permissions are granted
        const p = room.localParticipant;
        await p.setCameraEnabled(true);
        await p.setMicrophoneEnabled(true);
        /////////////////////////////////////////
    
        function handleTrackSubscribed(
        track: RemoteTrack,
        publication: RemoteTrackPublication,
        participant: RemoteParticipant,
        ) {
        if (track.kind === Track.Kind.Video || track.kind === Track.Kind.Audio) {
            // attach it to a new HTMLVideoElement or HTMLAudioElement
            const element = track.attach();
            let parentElement = document.getElementById("livekit_container");
            parentElement.appendChild(element);
        }
        }
    
        function handleTrackUnsubscribed(track: RemoteTrack, publication: RemoteTrackPublication, participant: RemoteParticipant) {
            // remove tracks from all attached elements
            console.log("detaching tracks from all attached elements....");
            track.detach();
        }
    
        function handleLocalTrackUnpublished(publication: LocalTrackPublication, participant: LocalParticipant) {
            // when local tracks are ended, update UI to remove them from rendering
            console.log("updating UI to remove ended local tracks from rendering....");
            publication.track.detach();
        }
    
        function handleActiveSpeakerChange(speakers: Participant[]) {
            // show UI indicators when participant is speaking
        }
     
        function handleDisconnect() {
            console.log('disconnected from room');
        }
    </script>
  </head>
  <body>
    <h1>Welcome to the AI Voice Agent Page!</h1>
    <p>This page is under construction....</p>
    <div id="livekit_container"></div>
  </body>
</html>
